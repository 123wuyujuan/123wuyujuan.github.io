<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐泽雪穗</title>
  
  
  <link href="https://123wuyujuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://123wuyujuan.github.io/"/>
  <updated>2020-10-28T04:24:13.092Z</updated>
  <id>https://123wuyujuan.github.io/</id>
  
  <author>
    <name>Yujuan Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决方法：浏览器账号密码自动保存</title>
    <link href="https://123wuyujuan.github.io/uncategorized/web%E5%AE%89%E5%85%A8/"/>
    <id>https://123wuyujuan.github.io/uncategorized/web%E5%AE%89%E5%85%A8/</id>
    <published>2020-10-28T04:23:52.000Z</published>
    <updated>2020-10-28T04:24:13.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器账号密码自动保存"><a href="#浏览器账号密码自动保存" class="headerlink" title="浏览器账号密码自动保存"></a>浏览器账号密码自动保存</h3><p>在用户在web页面登录时，浏览器会问用户是否保存账号密码，如果用户点击保存，那么在下次登录的时候可能会出现下面两种情况：</p><ol><li>账号密码手动回填</li></ol><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20201027102122167.png" alt="image-20201027102122167"></p><ol start="2"><li><p>账号密码自动回填</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20201027102412090.png" alt="image-20201027102412090"></p></li></ol><p>如果用户在公共电脑上顺手点了保存，那么之后使用此电脑的人就很容易获取到用户的账号信息。虽然这样的设计方便了用户登录，但也很容易导致安全隐患。</p><h4 id="页面的处理方式"><a href="#页面的处理方式" class="headerlink" title="页面的处理方式"></a>页面的处理方式</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浏览器账号密码自动保存&quot;&gt;&lt;a href=&quot;#浏览器账号密码自动保存&quot; class=&quot;headerlink&quot; title=&quot;浏览器账号密码自动保存&quot;&gt;&lt;/a&gt;浏览器账号密码自动保存&lt;/h3&gt;&lt;p&gt;在用户在web页面登录时，浏览器会问用户是否保存账号密码，如果用户点</summary>
      
    
    
    
    
    <category term="Web安全" scheme="https://123wuyujuan.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="前端" scheme="https://123wuyujuan.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>DNS攻击</title>
    <link href="https://123wuyujuan.github.io/uncategorized/DNS%E6%94%BB%E5%87%BB/"/>
    <id>https://123wuyujuan.github.io/uncategorized/DNS%E6%94%BB%E5%87%BB/</id>
    <published>2020-10-28T04:16:38.000Z</published>
    <updated>2020-10-28T04:22:39.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS-request-Flood-攻击"><a href="#DNS-request-Flood-攻击" class="headerlink" title="DNS request Flood 攻击"></a>DNS request Flood 攻击</h3><h3 id="DNS-Reply-Flood-攻击"><a href="#DNS-Reply-Flood-攻击" class="headerlink" title="DNS Reply Flood 攻击"></a>DNS Reply Flood 攻击</h3><p>DNS 查询通常基于 UDP 协议，而 UDP 协议是无连接的，当 DNS 服务器收到 DNS reply报文时，不管自己有没有发出过解析请求，都会对 DNS reply 报文进行处理。DNS Reply Flood 就是黑客发送大量 DNS reply 报文给 DNS 服务器，导致消耗大量缓存服务器资源，无法正常解析 DNS 授权服务器发送的 DNS reply报文。</p><ul><li><h4 id="源认证"><a href="#源认证" class="headerlink" title="源认证"></a>源认证</h4><p>DNS Reply Flood 的源 IP 地址通常是伪造的，所以可以通过判断源 IP 地址的真假来防范攻击。这种方式通过构造一个 DNS request报文进行认证。</p><ul><li>DNS reply 报文超过阈值，收到 DNS reply 报文后会重新构造一个 DNS request 报文，并记录构造查询报文的Query ID和源端口号。</li><li>如果是真实源，则会回应 DNS reply 报文，如果与之前记录的 Query ID 和源端口号匹配成功，则加入白名单，认证成功。之后发送的报文直接通过。</li><li>如果是虚假源，则不会回应这个 DNS request 报文，认证不通过。</li></ul></li></ul><p><img src="https://forum.huawei.com/huaweiconnect/data/attachment/forum/201801/29/20180129110247726.png" alt="20180129110247726.png"></p><ul><li><p>DNS 反射攻击</p><p>一种更高级的 DNS Reply Flood，攻击目标是客户端而不是 DNS 缓存服务器，并且 DNS 请求是真实的</p><ul><li><h4 id="会话检查"><a href="#会话检查" class="headerlink" title="会话检查"></a>会话检查</h4><p>利用防火墙的会话表机制，DNS 交互过程中，DNS request 报文首包建立会话，保存五元组信息。当收到 DNS reply 报文时，匹配会话表，如果命中才允许通过。</p></li></ul></li></ul><h3 id="利用限速防范-DNS-Request-Flood-和-DNS-reply攻击"><a href="#利用限速防范-DNS-Request-Flood-和-DNS-reply攻击" class="headerlink" title="利用限速防范 DNS Request Flood 和 DNS reply攻击"></a>利用限速防范 DNS Request Flood 和 DNS reply攻击</h3><ul><li><p>域名限速</p><p>如果某个域名的DNS请求或回应报文速率过高，可以针对这个域名进行限速。</p></li><li><p>源 IP 地址限速</p><p>如果某个源IP地址域名解析的速率过大，就可以有针对性的对这个源IP地址进行限制，这样也不会对其他源有影响。</p></li></ul><h3 id="DNS-缓存投毒攻击"><a href="#DNS-缓存投毒攻击" class="headerlink" title="DNS 缓存投毒攻击"></a>DNS 缓存投毒攻击</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;DNS-request-Flood-攻击&quot;&gt;&lt;a href=&quot;#DNS-request-Flood-攻击&quot; class=&quot;headerlink&quot; title=&quot;DNS request Flood 攻击&quot;&gt;&lt;/a&gt;DNS request Flood 攻击&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
    <category term="DNS" scheme="https://123wuyujuan.github.io/tags/DNS/"/>
    
    <category term="DDos" scheme="https://123wuyujuan.github.io/tags/DDos/"/>
    
    <category term="Web安全" scheme="https://123wuyujuan.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ant-design-vue 插槽使用</title>
    <link href="https://123wuyujuan.github.io/uncategorized/ant-design%20vue%20%E6%8F%92%E6%A7%BD%E4%BD%BF%E7%94%A8/"/>
    <id>https://123wuyujuan.github.io/uncategorized/ant-design%20vue%20%E6%8F%92%E6%A7%BD%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-20T06:42:51.000Z</published>
    <updated>2020-10-28T06:30:59.028Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-table</span> <span class="attr">:columns</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">:dataSource</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:pagination</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:rowKey</span>=<span class="string">&quot;(record,index) =&gt; index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;duty&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;text, record, index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;text == &#x27;general&#x27;&quot;</span>&gt;</span>普通员工<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;text == &#x27;expert&#x27;&quot;</span>&gt;</span>专家<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;text == &#x27;admin&#x27;&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;status&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;text, record, index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;text == &#x27;1&#x27;&quot;</span>&gt;</span>正常<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;text == &#x27;0&#x27;&quot;</span>&gt;</span>失效<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;action&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;text, record, index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;editUser(record)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// script 部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            columns:[</span><br><span class="line">       &#123;</span><br><span class="line">           title: <span class="string">&#x27;用户账号&#x27;</span>,</span><br><span class="line">           dataIndex: <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           title: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">           dataIndex: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           title: <span class="string">&#x27;角色&#x27;</span>,</span><br><span class="line">           dataIndex: <span class="string">&#x27;duty&#x27;</span>,</span><br><span class="line">           scopedSlots: &#123;<span class="attr">customRender</span>: <span class="string">&#x27;duty&#x27;</span>&#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           title: <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">           dataIndex: <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">           scopedSlots: &#123;<span class="attr">customRender</span>: <span class="string">&#x27;status&#x27;</span>&#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           title: <span class="string">&#x27;操作&#x27;</span>,</span><br><span class="line">           dataIndex: <span class="string">&#x27;action&#x27;</span>,</span><br><span class="line">           scopedSlots: &#123;<span class="attr">customRender</span>: <span class="string">&#x27;action&#x27;</span>&#125;,</span><br><span class="line">       &#125;],</span><br><span class="line">            dataList: [],</span><br><span class="line">            loading: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.getList()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">     <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">this</span>.$http.get(<span class="string">&#x27;/getUsers.do&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.dataList = res || []</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">editUser</span>(<span class="params">record</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$refs.addModal.showModal(record)</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="1-columns-定义table-表头-以及和-dataList-的字段对应"><a href="#1-columns-定义table-表头-以及和-dataList-的字段对应" class="headerlink" title="1.columns 定义table 表头,以及和 dataList 的字段对应,"></a>1.columns 定义table 表头,以及和 dataList 的字段对应,</h5><h5 id="2-dataSource-为数据源-是一个数组"><a href="#2-dataSource-为数据源-是一个数组" class="headerlink" title="2. dataSource 为数据源,是一个数组,"></a>2. dataSource 为数据源,是一个数组,</h5><h5 id="3-loading-加载时loading-数据请求前设置-true-请求完成后设置-false"><a href="#3-loading-加载时loading-数据请求前设置-true-请求完成后设置-false" class="headerlink" title="3.loading 加载时loading,数据请求前设置 true,请求完成后设置 false,"></a>3.loading 加载时loading,数据请求前设置 true,请求完成后设置 false,</h5><h5 id="4-插槽的使用"><a href="#4-插槽的使用" class="headerlink" title="4.插槽的使用"></a>4.插槽的使用</h5><p>很多情况下,后端返回的数据是 数字,前端需要展示文字,这事使用插槽就会非常方便<br>1.首先,在 columns 中需要的部分添加 scopedSlots: {customRender: ‘status’}<br>2.table 中添加标签</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template slot=<span class="string">&quot;status&quot;</span> slot-scope=<span class="string">&quot;text, record, index&quot;</span>&gt;</span><br><span class="line">   &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;text == &#x27;1&#x27;&quot;</span>&gt;正常&lt;/span&gt;</span><br><span class="line">    &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;text == &#x27;0&#x27;&quot;</span>&gt;失效&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>customRender 的值和slot 的值相对应,slot-scope 中 text就是status的值(text可以自定义,key,item都可以), record 代表text所在的对象,可以通过 record 拿到该行的其他值. 比如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">editUser</span>(<span class="params">record</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.$refs.addModal.showModal(record)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>把record作为参数传递,编辑改用户信息.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a-table&lt;/span&gt; &lt;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://123wuyujuan.github.io/tags/JavaScript/"/>
    
    <category term="vue" scheme="https://123wuyujuan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>【解决方法】hexo g 报错 &quot;OperationalError:&#39; EPERM:&#39;  operation not permitted, unlink …&quot;</title>
    <link href="https://123wuyujuan.github.io/uncategorized/hexo-%E9%94%99%E8%AF%AF/"/>
    <id>https://123wuyujuan.github.io/uncategorized/hexo-%E9%94%99%E8%AF%AF/</id>
    <published>2020-10-19T08:10:50.000Z</published>
    <updated>2020-10-19T08:48:49.276Z</updated>
    
    <content type="html"><![CDATA[<p>运行 hexo g 报错如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: [OperationalError: EPERM: operation not permitted, unlink &#39;F:\blog\public\uncategorized\newpaper&#39;] &#123;</span><br><span class="line">    cause: [Error: EPERM: operation not permitted, unlink &#39;F:\blog\public\uncategorized\newpaper&#39;] &#123;</span><br><span class="line">      errno: -4048,</span><br><span class="line">      code: &#39;EPERM&#39;,</span><br><span class="line">      syscall: &#39;unlink&#39;,</span><br><span class="line">      path: &#39;F:\\blog\\public\\uncategorized\\newpaper&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    isOperational: true,</span><br><span class="line">    errno: -4048,</span><br><span class="line">    code: &#39;EPERM&#39;,</span><br><span class="line">    syscall: &#39;unlink&#39;,</span><br><span class="line">    path: &#39;F:\\blog\\public\\uncategorized\\newpaper&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上的解决办法：</p><ol><li><h4 id="权限不够，cmd-使用管理员打开"><a href="#权限不够，cmd-使用管理员打开" class="headerlink" title="权限不够，cmd 使用管理员打开"></a>权限不够，cmd 使用管理员打开</h4><p>无法解决</p></li><li><h4 id="删除-C-Users-用户-下-npmrc-文件"><a href="#删除-C-Users-用户-下-npmrc-文件" class="headerlink" title="删除 C:\Users\用户 下 .npmrc 文件"></a>删除 <code>C:\Users\用户</code> 下 <code>.npmrc</code> 文件</h4><p><strong>无法解决</strong></p></li><li><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><p>使用 <code>npm clean cache --force</code> 清除缓存</p><p>删除 <code>package-lock.json</code> 文件</p><p>使用 <code>npm install</code> 重新安装</p><p><strong>无法解决</strong></p></li><li><h4 id="删除-node-modules-目录"><a href="#删除-node-modules-目录" class="headerlink" title="删除 node_modules 目录"></a>删除<code> node_modules</code> 目录</h4><p><strong>无法解决</strong></p></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>   网上几乎全是针对 npm 的解决方法，而我的错误是在执行 <code>hexo g</code>  遇到的，且在官网上也没找到解决办法，最后尝试 <strong>删除 F:\blog\public\ 下对应的目录</strong> ，重新 <code>hexo g</code> 就不会报错了</p><p>   他在错误中已经提示了：</p>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">err: [OperationalError: EPERM: operation not permitted, unlink &#39;F:\blog\public\uncategorized\newpaper&#39;]</span><br></pre></td></tr></table></figure><p>   我一开始把 newpaper 文件删除了，但是他又会报另外 uncategorized 下的另一个文件的错，所以需要删除 uncategorized 整个目录，大家根据自己的情况删除就行了，我这个目录下的文件都是根据 source/_posts/ 生成的，删除之后再执行命令 <code>hexo g</code> 会重新生成的~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行 hexo g 报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FATAL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://123wuyujuan.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ES2020新特性</title>
    <link href="https://123wuyujuan.github.io/uncategorized/ES2020%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://123wuyujuan.github.io/uncategorized/ES2020%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-10-18T02:57:16.000Z</published>
    <updated>2020-10-19T03:44:12.283Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Dynamic-import"><a href="#Dynamic-import" class="headerlink" title="Dynamic import"></a>Dynamic import</h3><p>不同于 <code>ECMAScript2015</code> 中的静态引入模块，<code>Dynamic import</code> 提供了<strong>按需引入</strong>、<strong>计算模块名称</strong>和<strong>脚本内部执行</strong>，并返回一个<code>promise</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modulePage = <span class="string">&#x27;page.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span>(modulePage)</span><br><span class="line">    .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">module</span>.default();</span><br><span class="line">    &#125;);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> helpersModule = <span class="string">&#x27;helpers.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(helpersModule)</span><br><span class="line">  <span class="keyword">const</span> total = <span class="built_in">module</span>.sum(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h3><p>在<code>promise</code>中有两个重要的方法：<code>promise.all()</code> 和 <code>promise.race()</code>，新增的 <code>promise.allSettled()</code> 方法，返回一个在所有给定的promise都已经<code>fulfilled</code>或<code>rejected</code>后的promise，并带有一个对象数组，每个对象表示对应的promise结果。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise.allSettled(iterable);</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><p><code>iterable</code>: 一个可迭代的对象，所有成员都是 <code>promise</code></p></li><li><p>返回值</p><p>只要所有的 promise 都已经完成，无论是 resolve 还是 reject ，所有返回的 promise 都会集中为 一个数组， 数组包含每一个 promise 执行的结果。</p><p>每一个结果都是一个对象，包含一个 <code>status</code> 字符串，值为 <code>fulfilled</code> 或者 <code>rejected</code>，此外，还包含一个 fulfilled 时的 <code>value</code>或者 rejected 时的 <code>reson</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled(promises).</span><br><span class="line">  then(<span class="function">(<span class="params">results</span>) =&gt;</span> results.forEach(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="built_in">console</span>.log(result)));</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Object &#123; status: &quot;fulfilled&quot;, value: 3 &#125;</span></span><br><span class="line"><span class="comment">// Object &#123; status: &quot;rejected&quot;, reason: &quot;foo&quot; &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20201010112650897.png" alt="image-20201010112650897"></p><h3 id="String-prototype-matchAll-RegExp"><a href="#String-prototype-matchAll-RegExp" class="headerlink" title="String.prototype.matchAll(RegExp)"></a>String.prototype.matchAll(RegExp)</h3><p>以往，当我们使用 <code>String.prototype.match()</code> 方法时，总是返回一个数组，其中包含所有完全匹配的字符串：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;From 2019.01.29 to 2019.01.30&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;).(?&lt;month&gt;\d&#123;2&#125;).(?&lt;day&gt;\d&#123;2&#125;)/gu</span>;</span><br><span class="line"><span class="keyword">const</span> results = text.match(regexp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(results);</span><br><span class="line"><span class="comment">// [ &#x27;2019.01.29&#x27;, &#x27;2019.01.30&#x27; ]</span></span><br></pre></td></tr></table></figure><p>而 <code>matchAll()</code> 还能够返回所有 <code>Regex</code> 捕获组：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;From 2019.01.29 to 2019.01.30&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;).(?&lt;month&gt;\d&#123;2&#125;).(?&lt;day&gt;\d&#123;2&#125;)/gu</span>;</span><br><span class="line"><span class="keyword">const</span> results = <span class="built_in">Array</span>.from(text.matchAll(regexp));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(results);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;2019.01.29&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;2019&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;01&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;29&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 5,</span></span><br><span class="line"><span class="comment">//     input: &#x27;From 2019.01.29 to 2019.01.30&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: [Object: null prototype] &#123; year: &#x27;2019&#x27;, month: &#x27;01&#x27;, day: &#x27;29&#x27; &#125;</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;2019.01.30&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;2019&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;01&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;30&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 19,</span></span><br><span class="line"><span class="comment">//     input: &#x27;From 2019.01.29 to 2019.01.30&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: [Object: null prototype] &#123; year: &#x27;2019&#x27;, month: &#x27;01&#x27;, day: &#x27;30&#x27; &#125;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="可选链操作符（-）"><a href="#可选链操作符（-）" class="headerlink" title="可选链操作符（?.）"></a>可选链操作符（?.）</h3><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><p>当要访问嵌套在<strong>对象内部的属性</strong>时，我们很有可能会遇到这样的错误：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property...</span><br></pre></td></tr></table></figure><p>所以, 当我们需要访问一个属性时，我们经常会这样写以避免错误:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = obj &amp;&amp; obj.foo.<span class="comment">// 确认 obj 和 obj.foo 都不是 undefined 或 null</span></span><br></pre></td></tr></table></figure><p>但是即使是这样写也会经常遗漏，且繁琐，如果采用可选链式调用，就可以大量简化这样的前置校验：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = obj ?. foo</span><br><span class="line"><span class="keyword">let</span> bar = obj ?. foo ?. bar</span><br></pre></td></tr></table></figure><p>有了可选链操作符（<code>?.</code>），在访问 <code>obj.foo.bar</code> 之前，不再需要明确地校验 <code>obj.foo</code> 的状态，一旦遇到 <code>null</code> 或者 <code>undefined</code>就会返回 <code>undefined</code>。</p><h4 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h4><p>当我们需要<strong>尝试调用一个可能不存在的方法</strong>时，可以使用可选链来避免返回异常：</p><blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = obj.someMethod?.();</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ES2019的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">onContent, onError</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ... do something with the data </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (onError) &#123; <span class="comment">// 校验onError是否真的存在</span></span><br><span class="line">      onError(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用可选链进行函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">onContent, onError</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// ... do something with the data</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    onError?.(err.message); <span class="comment">// 如果onError是undefined也不会有异常</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选链和表达式"><a href="#可选链和表达式" class="headerlink" title="可选链和表达式"></a>可选链和表达式</h4><p>使用方括号和属性名的形式来访问属性：</p><blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = obj?.[<span class="string">&#x27;prop&#x27;</span> + <span class="string">&#x27;Name&#x27;</span>];</span><br></pre></td></tr></table></figure></blockquote><p>访问数组元素：</p><blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> item = arr ?. [<span class="number">20</span>];</span><br></pre></td></tr></table></figure></blockquote><h4 id="可选链不能用于赋值"><a href="#可选链不能用于赋值" class="headerlink" title="可选链不能用于赋值"></a>可选链不能用于赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">object?.property = <span class="number">1</span>; <span class="comment">// Uncaught SyntaxError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure><h4 id="浏览器兼容性-1"><a href="#浏览器兼容性-1" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20201009183538356.png" alt="image-20201009183538356"></p><h3 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符( ?? )"></a>空值合并操作符( ?? )</h3><p>通常，当我们需要为判断变量是否为 <strong>null</strong> ，并为变量赋值时，我们需要利用 <code>逻辑或操作符(||)</code>，当左边为假值时返回右侧操作数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line"><span class="comment">//  foo is never assigned any value so it is still undefined</span></span><br><span class="line"><span class="keyword">let</span> someDummyText = foo || <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: &#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure><p>看上去并没有什么问题，但 <code>||</code> 是一个布尔逻辑运算符，左侧的操作数会被强制转换为布尔值，因此，所有的假值（<code>0</code>, <code>‘’,</code> <code>NaN</code>, <code>null</code>, <code>undefined</code>）都会被转为 <code>false</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> number = count || <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> message = text || <span class="string">&quot;hi!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(number);     <span class="comment">// 42，而不是 0</span></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// &quot;hi!&quot;，而不是 &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>而使用空值合并操作符可以避免，只有在第一个操作数为 <code>null</code> 或者 <code>undefined</code> 时，才返回第二个操作数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> number = count ?? <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> message = text ?? <span class="string">&quot;hi!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(number);     <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// “”</span></span><br></pre></td></tr></table></figure><h4 id="与可选链式操作符之间的关系"><a href="#与可选链式操作符之间的关系" class="headerlink" title="与可选链式操作符之间的关系"></a>与可选链式操作符之间的关系</h4><p>空值合并操作符针对 <code>undefined</code> 与 <code>null</code> 这两个值，可选链式操作符（<code>?.</code>） 也是如此。在这访问属性可能为 <code>undefined</code> 与 <code>null</code> 的对象时，可选链式操作符非常有用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">someFooProp</span>: <span class="string">&quot;hi&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.someFooProp?.toUpperCase()); <span class="comment">// &quot;HI&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.someBarProp?.toUpperCase()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;Dynamic-import&quot;&gt;&lt;a href=&quot;#Dynamic-import&quot; class=&quot;headerlink&quot; title=&quot;Dynamic import&quot;&gt;&lt;/a&gt;Dynamic import&lt;/h3&gt;&lt;p&gt;不同于 &lt;code</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://123wuyujuan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>newpaper</title>
    <link href="https://123wuyujuan.github.io/uncategorized/newpaper/"/>
    <id>https://123wuyujuan.github.io/uncategorized/newpaper/</id>
    <published>2020-10-12T09:18:44.000Z</published>
    <updated>2020-10-19T10:29:32.983Z</updated>
    
    <content type="html"><![CDATA[<p>my first blog!!<br>I’m so excited!!!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;my first blog!!&lt;br&gt;I’m so excited!!!&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="test" scheme="https://123wuyujuan.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://123wuyujuan.github.io/uncategorized/hello-world/"/>
    <id>https://123wuyujuan.github.io/uncategorized/hello-world/</id>
    <published>2020-10-10T06:48:50.423Z</published>
    <updated>2020-10-19T08:10:17.328Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>good luck!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
